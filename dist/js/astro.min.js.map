{"version":3,"sources":["planet.ts","aspect.ts","point.js","person.ts","chart.ts","chart-factory.ts"],"names":[],"mappings":"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AC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,EAAC,OAAO,EAAC,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,EAAC,MAAM,EAAC,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,EAAC,SAAS,EAAC,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,EAAC,QAAQ,EAAC,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,EAAC,QAAQ,EAAC,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,EAAC,SAAS,EAAC,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,EAAC,OAAO,EAAC,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,EAAC,YAAY,EAAC,EAAC,MAAM,EAAC,YAAY,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,EAAC,YAAY,EAAC,EAAC,MAAM,EAAC,YAAY,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,EAAC,QAAQ,EAAC,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,EAAC,QAAQ,EAAC,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,EAAC,OAAO,EAAC,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,EAAC,QAAQ,EAAC,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,EAAC,MAAM,EAAC,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,EAAC,OAAO,EAAC,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,EAAC,QAAQ,EAAC,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,EAAC,UAAU,EAAC,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,EAAC,OAAO,EAAC,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,EAAC,MAAM,EAAC,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,EAAC,QAAQ,EAAC,EAAC,MAAM,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EAAC,IAAI,EAAC,KAAK,EA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","file":"astro.min.js","sourceRoot":"/source/","sourcesContent":["/**\n * One of the planets, asteroids, the sun or moon\n */\nexport class Planet {\n\n    /**\n     * The planet name, e.g. Mercury\n     * @type {string}\n     */\n    name: string;\n\n    /**\n     * A planet's longitude identifies what sign\n     * it is in\n     * @type {number}\n     */\n    longitude: number;\n\n    /**\n     * A planet's latitude describes it's distance\n     * from the ecliptic, and can be used to \n     * determine if it is out of bounds\n     * @type {number}\n     */\n    latitude: number;\n\n    /**\n     * A planet's speed allows us to know if it is\n     * retrograde, and to calculate whether an\n     * aspect is applying or separating\n     * @type {number}\n     */\n    speed: number;\n\n    /**\n     * The symbol for this planet as represented in\n     * the Kairon Semiserif font\n     * @type {string}\n     */\n    symbol: string;\n\n    /**\n     * Dictionary of symbols for the planets for\n     * use with the Kairon Semiserif font\n     * @type {Object}\n     */\n    private symbols = {\n        \"sun\":        'a',\n        \"moon\":       's',\n        \"mercury\":    'd',\n        \"venus\":      'f',\n        \"earth\":      'g',\n        \"mars\":       'h',\n        \"jupiter\":    'j',\n        \"saturn\":     'k',\n        \"uranus\":     'ö',\n        \"neptune\":    'ä',\n        \"pluto\":      '#',\n        \"south node\": '?',\n        \"north node\": 'ß',\n        \"ceres\":      'A',\n        \"pallas\":     'S',\n        \"juno\":       'D',\n        \"vesta\":      'F',\n        \"lilith\":     'ç',\n        \"cupido\":     'L',\n        \"chiron\":     'l',\n        \"nessus\":     'ò',\n        \"pholus\":     'ñ',\n        \"chariklo\":   'î',\n        \"eris\":       'È',\n        \"chaos\":      'Ê',\n        \"fortuna\":    '%'\n    };\n\n    /**\n     * Instantiate a new planet object.\n     * @param {string} name The planet's name\n     * @param {number} lon  The planet's longitude\n     * @param {number} lat  The planet's latitude\n     * @param {number} spd  The planet's speed relative to earth\n     */\n    constructor(name: string, lon: number, lat: number, spd: number) {\n        this.name = name;\n        this.longitude = lon;\n        this.latitude = lat;\n        this.speed = spd;\n        this.symbol = this.symbols[name.toLowerCase()];\n    }\n\n    /**\n     * A planet is retrograde when it's speed relative\n     * to earth is less than zero\n     * @return {boolean} Whether or not the planet is retrograde\n     */\n    isRetrograde(): boolean {\n        return this.speed < 0;\n    }\n\n    /**\n     * Is this one of the major planets typically included in a chart?\n     * @return {boolean} Returns true if it is a major planet\n     */\n    isMajor(): boolean {\n        return [\"sun\",\"moon\",\"mercury\",\"venus\",\"mars\",\"jupiter\",\"saturn\",\n                \"uranus\",\"neptune\",\"pluto\",\"north node\", \"south node\"]\n                .indexOf(this.name.toLowerCase()) > -1;\n    }\n}","import { Planet } from \"./planet\";\n\nclass AspectType {\n    major: boolean;\n    angle: number;\n    orb: number;\n    symbol: string;\n}\ninterface AspectTypeArray {\n    [name: string]: AspectType;\n}\n\n/**\n * Represents an aspect between two planets\n */\nexport class Aspect {\n\n    /**\n     * A label naming the aspect type, e.g. trine\n     * @type {string}\n     */\n    private _type: string;\n\n    /**\n     * Number of degrees away from being perfectly in aspect\n     * @type {number}\n     */\n    private _orb: number;\n\n    /**\n     * Is the aspect applying or separating\n     * @type {boolean}\n     */\n    private _applying: boolean;\n\n    /**\n     * Catalog of all of the aspect types available in our system\n     * @type {AspectTypeArray}\n     */\n    private _types: AspectTypeArray = {\n       \"conjunct\":       { major: true,  angle:   0,     orb: 6  , symbol: \"<\" },\n       \"semisextile\":    { major: false, angle:  30,     orb: 3  , symbol: \"y\" },\n       \"decile\":         { major: false, angle:  36,     orb: 1.5, symbol: \">\" },\n       \"novile\":         { major: false, angle:  40,     orb: 1.9, symbol: \"M\" },\n       \"semisquare\":     { major: false, angle:  45,     orb: 3  , symbol: \"=\" },\n       \"septile\":        { major: false, angle:  51.417, orb: 2  , symbol: \"V\" },\n       \"sextile\":        { major: true,  angle:  60,     orb: 6  , symbol: \"x\" },\n       \"quintile\":       { major: false, angle:  72,     orb: 2  , symbol: \"Y\" },\n       \"bilin\":          { major: false, angle:  75,     orb: 0.9, symbol: \"-\" },\n       \"binovile\":       { major: false, angle:  80,     orb: 2  , symbol: \";\" },\n       \"square\":         { major: true,  angle:  90,     orb: 6  , symbol: \"c\" },\n       \"biseptile\":      { major: false, angle: 102.851, orb: 2  , symbol: \"N\" },\n       \"tredecile\":      { major: false, angle: 108,     orb: 2  , symbol: \"X\" },\n       \"trine\":          { major: true,  angle: 120,     orb: 6  , symbol: \"Q\" },\n       \"sesquiquadrate\": { major: false, angle: 135,     orb: 3  , symbol: \"b\" },\n       \"biquintile\":     { major: false, angle: 144,     orb: 2  , symbol: \"C\" },\n       \"inconjunct\":     { major: false, angle: 150,     orb: 3  , symbol: \"n\" },\n       \"treseptile\":     { major: false, angle: 154.284, orb: 1.1, symbol: \"B\" },\n       \"tetranovile\":    { major: false, angle: 160,     orb: 3  , symbol: \":\" },\n       \"tao\":            { major: false, angle: 165,     orb: 1.5, symbol: \"—\" },\n       \"opposition\":     { major: true,  angle: 180,     orb: 6  , symbol: \"m\" }\n    };\n\n    /**\n     * Creates a new Aspect or throws an error if no aspect exists\n     * between the planets\n     * @param {Planet} public p1 First planet in the relationship\n     * @param {Planet} public p2 Second planet in the relationship\n     */\n    constructor(public p1: Planet, public p2: Planet) {\n        // get key properties of the planets\n        let l1 = p1.longitude,\n            l2 = p2.longitude,\n            ng = Math.abs( l1 - l2 ),\n            r1 = p1.isRetrograde(),\n            r2 = p2.isRetrograde(),\n            s1 = Math.abs(p1.speed),\n            s2 = Math.abs(p2.speed),\n            ct = false; // corrected?\n\n        // correct for cases where the angle > 180 + the orb of opposition\n        if (ng > 180 + this._types[\"opposition\"].orb) {\n            ng = l1 > l2 ? 360 - l1 + l2 : 360 - l2 + l1;\n            ct = true; \n        }\n\n        // determine the aspect type\n        for (let type in this._types) {\n            let t = this._types[type];\n            if (ng >= t.angle - t.orb && ng <= t.angle + t.orb) {\n                this._type = type;\n            }\n        }\n\n        // bail out if there is no in-orb aspect between these two planets\n        if (typeof this._type === \"undefined\") {\n            throw new Error(\"There is no aspect between these two planets.\");\n        }\n\n        // determine the orb\n        this._orb = Number((ng % 1).toFixed(6));\n\n        // determine if it is applying or not; use speed magnitude (i.e. absolute value)\n        let orb = ng - this._types[this._type].angle;\n        // planets are in aspect across 0° Aries\n        if (( ( (orb < 0 && !ct && l2 > l1) || (orb > 0 && !ct && l1 > l2) ||\n                (orb < 0 &&  ct && l1 > l2) || (orb > 0 &&  ct && l2 > l1) ) &&\n                ( (!r1 && !r2 && s2 > s1) || (r1 && r2 && s1 > s2) || (r1 && !r2) ) ||\n            ( ( (orb > 0 && !ct && l2 > l1) || (orb < 0 && !ct && l1 > l2) ||\n                (orb > 0 &&  ct && l1 > l2) || (orb < 0 &&  ct && l2 > l1) ) &&\n                ( (!r1 && !r2 && s1 > s2) || (r1 && r2 && s2 > s1) || (!r1 && r2) ) ) )\n        ) {\n            this._applying = true;\n        } else {\n            this._applying = false;\n        }\n    }\n\n    /**\n     * Get the type assigned to this aspect\n     * @return {string} One of the aspect type names\n     */\n    get type(): string { return this._type; }\n\n    /**\n     * Get the number of degrees away from being in perfect aspect\n     * @return {number} The number of degrees (absolute value)\n     */\n    get orb(): number { return this._orb; }\n\n    /**\n     * Get the character that will produce the correct symbol for\n     * this aspect in the Kairon Semiserif font\n     * @return {string} A character representing a symbol\n     */\n    get symbol(): string { return this._types[this._type].symbol; }\n\n    /**\n     * Is the aspect applying or separating?\n     * @return {boolean} True if the aspect is applying\n     */\n    isApplying(): boolean { return this._applying; }\n\n    /**\n     * Is this a \"major\" aspect? i.e. one of those you usually\n     * hear about in astrological forecasts\n     * @return {boolean} True if this is a \"major\" aspect\n     */\n    isMajor(): boolean { return this._types[this._type].major; }\n}",null,"import * as rp from \"request-promise\";\nimport { Point } from \"./point\";\n\nexport class Person {\n\n    private _key: string = \"AIzaSyAXnIdQxap1WQuzG0XxHfYlCA5O9GQyvuY\";\n\n    location: Point;\n\n    /**\n     * Creates a Person (or Event) object\n     * @param {string} public name Name of the person or event\n     * @param {string} public date UTC date in ISO 8601 format, i.e. YYYY-MM-DDTHH:mmZ (caller must convert to UTC)\n     * @param {Point|string} location An address or lat/lon of the event or person's birthplace\n     */\n    constructor(public name:string, public date: string, location: Point | string) {\n        // make sure a name was submitted\n        if (!name) {\n            throw new Error(\"No name was submitted for the person/event\");\n        }\n\n        // make sure valid date was submitted\n        if (!/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}(?::\\d{2}\\.\\d{3})?Z/.test(date)) {\n            throw new TypeError(\"Date not formatted according to ISO 8601 (YYYY-MM-DDTHH:mmZ)\");\n        }\n\n        if (typeof location === \"string\") {\n            this.getLatLon(location).then((p: Point) => {this.location = p;});\n        } else {\n            // make sure latitude was valid\n            if (location.lat < -90 || location.lat > 90) {\n                throw new RangeError(\"Latitude must be between -90 and 90\");\n            }\n            // make sure longitude was valid\n            if (location.lon < -180 || location.lon > 180) {\n                throw new RangeError(\"Longitude must be between -180 and 180\");\n            }\n            this.location = location;\n        }\n\n    }\n\n    /**\n     * Gets a timezone given a latitude and longitude\n     * @param {Point} p  Contains the latitude and longitude in decimal format\n     */\n    async getTimezone(p: Point) {\n        return await rp({\n            uri: \"https://maps.googleapis.com/maps/api/timezone/json\",\n            qs: {\n                key: this._key,\n                location: `${p.lat},${p.lon}`,\n                timestamp: Math.floor(Date.now()/1000)\n            },\n            json: true\n        }).then(tzinfo => tzinfo.timeZoneId);\n    }\n\n    // TODO: error checking and other functionality from old project?\n    /**\n     * Get a latitude and longitude given an address\n     * @param {string} address The address of the desired lat/lon\n     */\n    async getLatLon(address: string) {\n        return await rp({\n            uri: \"https://maps.googleapis.com/maps/api/geocode/json\",\n            qs: {\n                key: this._key,\n                address: address\n            },\n            json: true\n        }).then((latlon): Point => latlon.results[0].geometry.location);\n    }\n\n}\n","/// <reference path=\"../typings/index.d.ts\" />\nimport * as rp from \"request-promise\";\nimport { Person } from \"./person\";\nimport { Planet } from \"./planet\";\nimport { Aspect } from \"./aspect\";\nimport { Point } from \"./point\";\nimport { ChartFactory } from \"./chart-factory\";\n\nexport enum ChartType {Basic, Transits, Synastry, Combined, Davison, CombinedTransits, DavisonTransits};\n\nexport interface PlanetData {\n    name: string;\n    lon: number;\n    lat: number;\n    spd: number;\n    r: number;\n}\nexport interface PlanetDataArray {\n    [name: string]: PlanetData;\n}\nexport interface ChartData {\n    planets: PlanetDataArray;\n    houses: Array<number>;\n    ascendant: number;\n    mc: number;\n}\nexport interface ChartDataArray {\n    [index: number]: ChartData;\n}\n\nexport class Chart {\n\n    _planets1: Array<Planet>;\n    _planets2: Array<Planet>;\n    _aspects: Array<Aspect>;\n    _ascendant: number;\n    _houses: Array<number>;\n\n    _signs = [\n        {name: \"aries\",       symbol: \"q\", v: 1},\n        {name: \"taurus\",      symbol: \"w\", v: 1},\n        {name: \"gemini\",      symbol: \"e\", v: 1},\n        {name: \"cancer\",      symbol: \"r\", v: 1},\n        {name: \"leo\",         symbol: \"t\", v: 1},\n        {name: \"virgo\",       symbol: \"z\", v: 1},\n        {name: \"libra\",       symbol: \"u\", v: 1},\n        {name: \"scorpio\",     symbol: \"i\", v: 1},\n        {name: \"sagittarius\", symbol: \"o\", v: 1},\n        {name: \"capricorn\",   symbol: \"p\", v: 1},\n        {name: \"aquarius\",    symbol: \"ü\", v: 1},\n        {name: \"pisces\",      symbol: \"+\", v: 1}\n    ];\n\n    constructor(public name: string, public p1: Person, cdata: ChartDataArray, public p2?: Person, public type: ChartType = ChartType.Basic) {\n        let pdata: ChartData;\n        switch (type) {\n            case ChartType.Combined:\n                pdata = this.calculateCombinedPlanets(cdata);\n                this._planets1 = this.getPlanets(pdata);\n                this._ascendant = pdata.ascendant;\n                this._houses = pdata.houses;\n                break;\n            case ChartType.CombinedTransits:\n                pdata = this.calculateCombinedPlanets(cdata);\n                this._planets1 = this.getPlanets(pdata);\n                this._planets2 = this.getPlanets(cdata[2]);\n                this._ascendant = pdata.ascendant;\n                this._houses = pdata.houses;\n                break;\n            default:\n                this._planets1 = this.getPlanets(cdata[0]);\n                if (cdata[1]) {\n                    this._planets2 = this.getPlanets(cdata[1]);\n                }\n                this._ascendant = cdata[0].ascendant;\n                this._houses = cdata[0].houses;\n                break;            \n        }\n        this.calculateAspects();\n    }\n\n    getPlanets(cdata: ChartData): Array<Planet> {\n        let planets: Array<Planet> = [];\n        // cdata.planets.forEach(p => planets.push(new Planet(p.name, p.lon, p.lat, p.spd)));\n        for (let p in cdata.planets) {\n            let pd = cdata.planets[p];\n            planets.push(new Planet(pd.name, pd.lon, pd.lat, pd.spd))\n        }\n        return planets;  \n    }\n\n    /**\n     * Calculates the aspects between planets in the chart\n     */\n    calculateAspects(): void {\n        this._aspects = [];\n        if (!this._planets2) {\n            // calculate aspects within the _planets1 array\n            for(let i in this._planets1) {\n                for(let j in this._planets1) {\n                    if (i !== j && j > i) {\n                        try {\n                            this._aspects.push(new Aspect(this._planets1[i], this._planets1[j]));\n                        } catch (err) {}\n                    }\n                }\n            }\n        }\n        else {\n            // calculate aspects between the _planets1 and _planets2 arrays\n            for(let i in this._planets1) {\n                for(let j in this._planets2) {\n                    try {\n                        this._aspects.push(new Aspect(this._planets1[i], this._planets2[j]));\n                    } catch (err) {}\n                }\n            }\n        }\n    }\n\n    /**\n     * Calculates longitudes for a combined chart\n     * @param {ChartData} p1 Planet data from person one\n     * @param {ChartData} p2 Planet data from person two\n     */\n    calculateCombinedPlanets(cdata: ChartDataArray): ChartData {\n        let cd: ChartData = {\"planets\":{\"sun\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"moon\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"mercury\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"venus\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"mars\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"jupiter\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"saturn\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"uranus\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"neptune\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"pluto\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"north node\":{\"name\":\"north node\",\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"south node\":{\"name\":\"south node\",\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"chiron\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"pholus\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"ceres\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"pallas\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"juno\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"vesta\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"cupido\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"chariklo\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"chaos\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"eris\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null},\"nessus\":{\"name\":null,\"lon\":null,\"lat\":null,\"spd\":null,\"r\":null}},\"houses\":[null,null,null,null,null,null,null,null,null,null,null,null],\"ascendant\":null,\"mc\":null};\n        for(let p in cdata[0].planets) {\n            cd.planets[p].name = p;\n            cd.planets[p].lon = this.getLonMidpoint(cdata[0].planets[p].lon, cdata[1].planets[p].lon);\n            cd.planets[p].lat = (cdata[0].planets[p].lat + cdata[1].planets[p].lat) / 2;\n            cd.planets[p].spd = (cdata[0].planets[p].spd + cdata[1].planets[p].spd) / 2;\n        }\n        for(let h in cdata[0].houses) {\n            cd.houses[h] = this.getLonMidpoint(cdata[0].houses[h], cdata[1].houses[h]);\n        }\n        cd.ascendant = this.getLonMidpoint(cdata[0].ascendant, cdata[1].ascendant);\n        cd.mc = this.getLonMidpoint(cdata[0].mc, cdata[1].mc);\n        return cd;\n    }\n\n    /**\n     * Finds the midpoint between two planets on the \"short\" side\n     * @param  {number} l1 Longitude of planet one\n     * @param  {number} l2 Longitude of planet two\n     * @return {number}    Longitude of the midpoint\n     */\n    getLonMidpoint(l1: number, l2: number): number {\n        let mp: number, high: number, low: number;\n\n        // if they are exactly the same, return either one\n        if (l1 === l2) {\n            return l1;\n        }\n\n        // figure out which has a higher/lower longitude\n        high = l1 > l2 ? l1 : l2;\n        low  = l1 < l2 ? l1 : l2;\n\n        if (high - low <= 180) {\n            mp = (high + low) / 2;\n        }\n        else {\n            mp = ((((low + 360) - high) / 2) + high) % 360;\n        }\n\n        return mp;\n    }\n\n    /**\n     * Refresh or set the transits to a new time\n     * @param {string} date (Optional) Target datetime for transits in ISO 8601 format; defaults to now()\n     */\n    async refreshTransits(date?: string) {\n        if (ChartType.Synastry === this.type) {\n            throw new Error(\"You cannot refresh transits on a synastry chart\");\n        }\n        if (!date) {\n            date = new Date().toISOString();\n        }\n        let cdata = await ChartFactory.getChartData(this.p1.date, this.p1.location);\n        this._planets2 = this.getPlanets(cdata);\n        this.calculateAspects();\n    }\n\n    /**\n     * Returns the x-coordinate for a planet\n     * @param  {number} radius Distance from the center of chart to the arc upon which planet is to be drawn\n     * @param  {number} lon Longitude of the planet\n     * @return {number}    X-coordinate of the planet (in pixels)\n     */\n    x = (radius: number, lon: number): number => {\n        return radius * Math.cos(ChartFactory.toRadians(180 + this._ascendant - lon));\n    };\n\n    /**\n     * Returns the y-coordinate for a planet\n     * @param  {number} radius Distance from the center of chart to the arc upon which planet is to be drawn\n     * @param  {number} lon Longitude of the planet\n     * @return {number}    Y-coordinate of the planet (in pixels)\n     */\n    y = (radius: number, lon: number): number => {\n        return radius * Math.sin(ChartFactory.toRadians(180 + this._ascendant - lon));\n    };\n\n    sign = (lon: number): any => this._signs[Math.floor(lon/30)];\n\n    degMinSec = (lon: number) => {\n        let deg: number, min: number, sec: number, sign: any;\n        sign = this.sign(lon);\n        lon = lon % 30;\n        deg = Math.floor(lon);\n        min = Math.floor((lon - deg) * 60);\n        sec = Math.round((((lon - deg ) * 60) - min) * 60);\n        return `${deg}°${min}'${sec}\" ${sign}`;\n    };\n\n    getD3Data(innerRadius: number, outerRadius: number) {\n        let radius  = this._planets2 ? innerRadius : outerRadius,\n            inOrOut = this._planets2 ? \"innerPlanets\" : \"outerPlanets\",\n            data: {\n                name: string, \n                innerPlanets: Array<any>, \n                outerPlanets: Array<any>, \n                aspects: Array<any>, \n                ascendant: number, \n                houses: Array<number>\n            } = {\n                \"name\": this.name,\n                \"innerPlanets\": [],\n                \"outerPlanets\": [],\n                \"aspects\": [],\n                \"ascendant\": this._ascendant,\n                \"houses\": this._houses \n            };\n\n        for(let p of this._planets1) {\n            data[inOrOut].push({\n                name: p.name,\n                symbol: p.symbol,\n                sign: this.degMinSec(p.longitude),\n                x: this.x(radius, p.longitude),\n                y: this.y(radius, p.latitude),\n                r: p.speed < 0,\n                fixed: false,\n                weight: 1,\n                radius: 15\n            });\n        }\n\n        if (this._planets2) {\n            for(let p of this._planets2) {\n                data.outerPlanets.push({\n                    name: p.name,\n                    symbol: p.symbol,\n                    sign: this.degMinSec(p.longitude),\n                    x: this.x(outerRadius, p.longitude),\n                    y: this.y(outerRadius, p.latitude),\n                    r: p.speed < 0,\n                    isMajor: p.isMajor(),\n                    fixed: false,\n                    weight: 1,\n                    radius: 15\n                });\n            }\n        }\n\n        for (let a of this._aspects) {\n            data.aspects.push({\n                type: a.type,\n                symbol: a.symbol,\n                orb: a.orb,\n                isApplying: a.isApplying(),\n                isMajor: a.isMajor,\n                x1: this.x(innerRadius, a.p1.longitude),\n                x2: this.x(innerRadius, a.p2.longitude),\n                y1: this.y(innerRadius, a.p1.longitude),\n                y2: this.y(innerRadius, a.p2.longitude),\n            });\n        }\n        return data;\n    }\n}","/// <reference path=\"../typings/index.d.ts\" />\nimport * as rp from \"request-promise\";\nimport { Chart, ChartType, ChartData } from \"./chart\";\nimport { Person } from \"./person\";\nimport { Point  } from \"./point\";\n\nexport class ChartFactory {\n\n    static async create(name: string, p1: Person, p2?: Person, type: ChartType = ChartType.Basic) {\n        let cdata: Array<ChartData> = [], date: string, p: Point;\n        switch(type) {\n            case ChartType.Transits:\n                cdata = await Promise.all([\n                    ChartFactory.getChartData(p1.date, p1.location),\n                    ChartFactory.getChartData(new Date().toISOString(), p1.location)\n                ]);\n                return new Chart(name, p1, cdata, null, type);\n            case ChartType.Synastry:\n            case ChartType.Combined:\n                cdata = await Promise.all([\n                    ChartFactory.getChartData(p1.date, p1.location),\n                    ChartFactory.getChartData(p2.date, p2.location)\n                ]);\n                return new Chart(name, p1, cdata, null, type);\n            case ChartType.CombinedTransits:\n                cdata = await Promise.all([\n                    ChartFactory.getChartData(p1.date, p1.location),\n                    ChartFactory.getChartData(p2.date, p2.location),\n                    ChartFactory.getChartData(new Date().toISOString(), p1.location)\n                ]);\n                return new Chart(name, p1, cdata, null, type);\n            case ChartType.Davison:\n                date = ChartFactory.getDatetimeMidpoint(p1.date, p2.date);\n                p = ChartFactory.getGeoMidpoint(p1.location, p2.location);\n                cdata.push(await ChartFactory.getChartData(date, p));\n                return new Chart(name, p1, cdata);\n            case ChartType.DavisonTransits:\n                date = ChartFactory.getDatetimeMidpoint(p1.date, p2.date);\n                p = ChartFactory.getGeoMidpoint(p1.location, p2.location);\n                cdata = await Promise.all([\n                    ChartFactory.getChartData(date, p),\n                    ChartFactory.getChartData(new Date().toISOString(), p)\n                ]);\n                return new Chart(name, p1, cdata, null, type);\n            default:\n                cdata.push(await ChartFactory.getChartData(p1.date, p1.location));\n                return new Chart(name, p1, cdata);\n        }\n    }\n\n    /**\n     * Calculates the lat/lon of the geographic midpoint between two lat/lon pairs\n     * @param {Point} p1 Latitude/longitude of first location\n     * @param {Point} p2 Latitude/longitude of second location\n     * @return {Point} The latitude/longitude of the geographic midpoint\n     */\n    static getGeoMidpoint(p1: Point, p2: Point): Point {\n        let lat1 = ChartFactory.toRadians( p1.lat ),\n            lon1 = ChartFactory.toRadians( p1.lon ),\n            lat2 = ChartFactory.toRadians( p2.lat ),\n            lon2 = ChartFactory.toRadians( p2.lon ),\n            bx   = Math.cos( lat2 ) * Math.cos( lon2 - lon1 ),\n            by   = Math.cos( lat2 ) * Math.sin( lon2 - lon1 ),\n            lon3 = lon1 + Math.atan2( by, Math.cos( lat1 ) + bx ),\n            lat3 = Math.atan2( Math.sin( lat1 ) + Math.sin( lat2 ),\n                   Math.sqrt( Math.pow( Math.cos( lat1 ) + bx, 2 ) + Math.pow( by, 2 ) ) );\n        \n        return { \n            lat: ChartFactory.toDegrees( lat3 ), \n            lon: ChartFactory.toDegrees( lon3 )\n        };\n    }\n\n    /**\n     * Finds the exact midpoint between two dates\n     * @param  {string} date1 The first date\n     * @param  {string} date2 The second date\n     * @return {string}       The midpoint date as an ISO 8601 string\n     */\n    static getDatetimeMidpoint(date1: string, date2: string): string {\n        let d1 = new Date(date1).getTime(),\n            d2 = new Date(date2).getTime(),\n            ts: number;\n        \n        // if two dates are the same, midpoint is just that date\n        if (d1 === d2) {\n            return date1;\n        }\n\n        ts = d1 < d2 ? d1 + ((d2 - d1) / 2) : d2 + ((d1 - d2) / 2);\n        return new Date(ts).toISOString();\n    }\n\n    /**\n     * Gets chart data from the online ephemeris\n     * @param {string} date A UTC datetime string in ISO 8601 format\n     * @param {number} lat  The latitude for the chart\n     * @param {number} lon  The longitude for the chart\n     */\n    static async getChartData(date: string, p: Point) {\n        return await rp({\n            uri: \"http://www.morphemeris.com/ephemeris.php\",\n            qs: {\n                date: date,\n                lat: p.lat,\n                lon: p.lon\n            },\n            json: true\n        }).then((cdata: ChartData) => cdata);\n    }\n\n    /**\n     * Converts decimal degrees to radians\n     * @param  {number} degrees Decimal representation of degrees to be converted\n     * @return {number}         Returns radians\n     */\n    static toRadians = (degrees: number) => degrees * Math.PI / 180;\n\n    /**\n     * Converts radians to decimal degrees\n     * @param  {number} radians Radians to be converted\n     * @return {number}         Returns decimal degrees\n     */\n    static toDegrees = (radians: number) => radians * 180 / Math.PI;\n}"]}